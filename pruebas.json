{
  "info": {
    "name": "CEDIS - Pruebas Completas",
    "description": "Colecci√≥n completa de pruebas para el sistema CEDIS con todo integrado en un solo archivo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "lectorId",
      "value": "",
      "type": "string"
    },
    {
      "key": "categoriaId",
      "value": "",
      "type": "string"
    },
    {
      "key": "documentoId",
      "value": "",
      "type": "string"
    },
    {
      "key": "prestamoId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üöÄ CONFIGURACI√ìN INICIAL",
      "item": [
        {
          "name": "1. Verificar Servidor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Servidor funcionando', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Respuesta contiene informaci√≥n del servicio', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "console.log('‚úÖ Servidor de autenticaci√≥n funcionando correctamente');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/status",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "status"]
            },
            "description": "Verificar que el servidor est√© funcionando"
          }
        },
        {
          "name": "2. Crear Primer Administrador",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    pm.test('Administrador creado exitosamente', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    ",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('userId', response.id);",
                  "    console.log('‚úÖ Primer administrador creado con ID:', response.id);",
                  "    ",
                  "} else if (pm.response.code === 400) {",
                  "    pm.test('Administrador ya existe', function () {",
                  "        pm.response.to.have.status(400);",
                  "    });",
                  "    console.log('‚ÑπÔ∏è El administrador ya existe');",
                  "    ",
                  "} else {",
                  "    pm.test('Error inesperado', function () {",
                  "        pm.expect.fail('Status code inesperado: ' + pm.response.code);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Juan Carlos\",\n  \"apellido\": \"P√©rez Garc√≠a\",\n  \"correo\": \"admin@biblioteca.unsa.edu.pe\",\n  \"tipo\": \"Administrador\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios/register-first-admin",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "register-first-admin"]
            },
            "description": "Crear el primer usuario administrador"
          }
        },
        {
          "name": "3. Obtener Token de Autenticaci√≥n",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Autenticaci√≥n exitosa', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token recibido', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response.access_token).to.be.a('string');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "if (response.access_token) {",
                  "    pm.collectionVariables.set('token', response.access_token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    console.log('‚úÖ Token guardado exitosamente');",
                  "    console.log('üë§ Usuario:', response.user.nombre, response.user.apellido);",
                  "    console.log('üìß Email:', response.user.correo);",
                  "    console.log('üè∑Ô∏è Tipo:', response.user.tipo);",
                  "} else {",
                  "    console.log('‚ùå No se pudo obtener el token');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@biblioteca.unsa.edu.pe\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/validate-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "validate-email"]
            },
            "description": "Obtener token JWT validando el email"
          }
        }
      ],
      "description": "Configuraci√≥n inicial del sistema",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "console.log('üöÄ Iniciando configuraci√≥n inicial...');"
            ]
          }
        }
      ]
    },
    {
      "name": "üìö CATEGOR√çAS",
      "item": [
        {
          "name": "Crear Categor√≠a - Ingenier√≠a",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Categor√≠a creada exitosamente', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Respuesta contiene ID de categor√≠a', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.id).to.be.a('number');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('categoriaId', response.id);",
                  "console.log('‚úÖ Categor√≠a Ingenier√≠a creada con ID:', response.id);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Ingenier√≠a de Sistemas\",\n  \"descripcion\": \"Libros y recursos relacionados con ingenier√≠a de sistemas, programaci√≥n y tecnolog√≠a\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categorias",
              "host": ["{{baseUrl}}"],
              "path": ["categorias"]
            }
          }
        },
        {
          "name": "Crear Categor√≠a - Matem√°ticas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Categor√≠a Matem√°ticas creada', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "console.log('‚úÖ Categor√≠a Matem√°ticas creada');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Matem√°ticas\",\n  \"descripcion\": \"Libros de c√°lculo, √°lgebra, estad√≠stica y matem√°ticas aplicadas\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categorias",
              "host": ["{{baseUrl}}"],
              "path": ["categorias"]
            }
          }
        },
        {
          "name": "Crear Categor√≠a - F√≠sica",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Categor√≠a F√≠sica creada', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "console.log('‚úÖ Categor√≠a F√≠sica creada');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"F√≠sica\",\n  \"descripcion\": \"Libros de f√≠sica te√≥rica, experimental y aplicada\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categorias",
              "host": ["{{baseUrl}}"],
              "path": ["categorias"]
            }
          }
        },
        {
          "name": "Listar Categor√≠as",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Categor√≠as listadas correctamente', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Respuesta contiene datos paginados', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('currentPage');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìö Total de categor√≠as:', response.total);",
                  "console.log('üìÑ Categor√≠as en esta p√°gina:', response.data.length);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categorias?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["categorias"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        }
      ],
      "description": "Gesti√≥n de categor√≠as de documentos"
    },
    {
      "name": "üìñ LECTORES",
      "item": [
        {
          "name": "Crear Lector Estudiante",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Lector estudiante creado', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Lector tiene ID v√°lido', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.id).to.be.a('number');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('lectorId', response.id);",
                  "console.log('‚úÖ Lector estudiante creado con ID:', response.id);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tipo\": \"Estudiante\",\n  \"nombre\": \"Ana Sof√≠a\",\n  \"apellido\": \"Mendoza Torres\",\n  \"identificacion\": \"20191234\",\n  \"correo\": \"20191234@unsa.edu.pe\",\n  \"telefono\": \"987654321\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/lectores",
              "host": ["{{baseUrl}}"],
              "path": ["lectores"]
            }
          }
        },
        {
          "name": "Crear Lector Docente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Lector docente creado', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "console.log('‚úÖ Lector docente creado');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tipo\": \"Docente\",\n  \"nombre\": \"Dr. Roberto\",\n  \"apellido\": \"Ch√°vez Morales\",\n  \"identificacion\": \"DOC001\",\n  \"correo\": \"rchavez@unsa.edu.pe\",\n  \"telefono\": \"954123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/lectores",
              "host": ["{{baseUrl}}"],
              "path": ["lectores"]
            }
          }
        },
        {
          "name": "Crear Lector Administrativo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Lector administrativo creado', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "console.log('‚úÖ Lector administrativo creado');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tipo\": \"Administrativo\",\n  \"nombre\": \"Ing. Patricia\",\n  \"apellido\": \"Flores Quispe\",\n  \"identificacion\": \"ADM001\",\n  \"correo\": \"pflores@unsa.edu.pe\",\n  \"telefono\": \"962147258\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/lectores",
              "host": ["{{baseUrl}}"],
              "path": ["lectores"]
            }
          }
        },
        {
          "name": "Listar Lectores",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Lectores listados correctamente', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìñ Total de lectores:', response.total);",
                  "console.log('üë• Lectores en esta p√°gina:', response.data.length);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/lectores?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["lectores"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        }
      ],
      "description": "Gesti√≥n de lectores del sistema"
    },
    {
      "name": "üìÑ DOCUMENTOS",
      "item": [
        {
          "name": "Crear Documento - Libro Java",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Libro creado exitosamente', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Documento tiene ID v√°lido', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.id).to.be.a('number');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('documentoId', response.id);",
                  "console.log('‚úÖ Libro de Java creado con ID:', response.id);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoria_id\": {{categoriaId}},\n  \"titulo\": \"Fundamentos de Programaci√≥n en Java\",\n  \"autor\": \"Herbert Schildt\",\n  \"editorial\": \"McGraw-Hill\",\n  \"tipo\": \"Libro\",\n  \"isbn\": \"978-0071809252\",\n  \"fecha_publicacion\": \"2020-01-15\",\n  \"ubicacion\": \"Estante A1-Nivel 2\",\n  \"cantidad_disponible\": 5,\n  \"cantidad_total\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/documentos",
              "host": ["{{baseUrl}}"],
              "path": ["documentos"]
            }
          }
        },
        {
          "name": "Crear Documento - Tesis",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tesis creada exitosamente', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "console.log('‚úÖ Tesis creada exitosamente');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoria_id\": {{categoriaId}},\n  \"titulo\": \"Sistema de Gesti√≥n Bibliotecaria con Tecnolog√≠a Web\",\n  \"autor\": \"Garc√≠a L√≥pez, Mar√≠a Elena\",\n  \"editorial\": \"UNSA\",\n  \"tipo\": \"Tesis\",\n  \"isbn\": \"\",\n  \"fecha_publicacion\": \"2023-12-15\",\n  \"ubicacion\": \"Archivo Tesis - T001\",\n  \"cantidad_disponible\": 1,\n  \"cantidad_total\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/documentos",
              "host": ["{{baseUrl}}"],
              "path": ["documentos"]
            }
          }
        },
        {
          "name": "Crear Documento - Diapositivas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Diapositivas creadas exitosamente', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "console.log('‚úÖ Diapositivas creadas exitosamente');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoria_id\": {{categoriaId}},\n  \"titulo\": \"Introducci√≥n a Algoritmos y Estructuras de Datos\",\n  \"autor\": \"Dr. Carlos Ram√≠rez\",\n  \"editorial\": \"UNSA - Facultad de Ingenier√≠a\",\n  \"tipo\": \"Diapositiva\",\n  \"isbn\": \"\",\n  \"fecha_publicacion\": \"2024-03-10\",\n  \"ubicacion\": \"Archivo Digital - D001\",\n  \"cantidad_disponible\": 3,\n  \"cantidad_total\": 3\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/documentos",
              "host": ["{{baseUrl}}"],
              "path": ["documentos"]
            }
          }
        },
        {
          "name": "Listar Documentos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Documentos listados correctamente', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìÑ Total de documentos:', response.total);",
                  "console.log('üìö Documentos en esta p√°gina:', response.data.length);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documentos?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["documentos"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Documentos por Categor√≠a",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Documentos filtrados por categor√≠a', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìÇ Documentos en categor√≠a Ingenier√≠a:', response.data.length);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/documentos/categoria/{{categoriaId}}?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["documentos", "categoria", "{{categoriaId}}"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        }
      ],
      "description": "Gesti√≥n de documentos de la biblioteca"
    },
    {
      "name": "üìã PR√âSTAMOS",
      "item": [
        {
          "name": "Crear Pr√©stamo",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Calcular fechas autom√°ticamente",
                  "const today = new Date();",
                  "const returnDate = new Date(today.getTime() + (14 * 24 * 60 * 60 * 1000)); // 14 d√≠as despu√©s",
                  "",
                  "const formatDate = (date) => {",
                  "    return date.toISOString().split('T')[0];",
                  "};",
                  "",
                  "pm.collectionVariables.set('fechaPrestamo', formatDate(today));",
                  "pm.collectionVariables.set('fechaDevolucion', formatDate(returnDate));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pr√©stamo creado exitosamente', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Pr√©stamo tiene ID v√°lido', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.id).to.be.a('number');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('prestamoId', response.id);",
                  "console.log('‚úÖ Pr√©stamo creado con ID:', response.id);",
                  "console.log('üìÖ Fecha pr√©stamo:', response.fecha_prestamo);",
                  "console.log('üìÖ Fecha devoluci√≥n programada:', response.fecha_devolucion_programada);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lector_id\": {{lectorId}},\n  \"documento_id\": {{documentoId}},\n  \"usuario_id\": {{userId}},\n  \"fecha_prestamo\": \"{{fechaPrestamo}}\",\n  \"fecha_devolucion_programada\": \"{{fechaDevolucion}}\",\n  \"observaciones\": \"Pr√©stamo de prueba - estudiante Ana Sof√≠a\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/prestamos",
              "host": ["{{baseUrl}}"],
              "path": ["prestamos"]
            }
          }
        },
        {
          "name": "Listar Pr√©stamos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pr√©stamos listados correctamente', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìã Total de pr√©stamos:', response.total);",
                  "console.log('üìë Pr√©stamos en esta p√°gina:', response.data.length);",
                  "",
                  "if (response.data.length > 0) {",
                  "    console.log('üîç Primer pr√©stamo:', {",
                  "        id: response.data[0].id,",
                  "        estado: response.data[0].estado,",
                  "        fecha_prestamo: response.data[0].fecha_prestamo",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/prestamos?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["prestamos"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Pr√©stamos Pendientes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Consulta de pendientes exitosa', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('‚ö†Ô∏è Pr√©stamos pendientes/vencidos:', response.length);",
                  "",
                  "if (response.length > 0) {",
                  "    response.forEach((prestamo, index) => {",
                  "        console.log(`   ${index + 1}. ID: ${prestamo.id}, Estado: ${prestamo.estado}`);",
                  "    });",
                  "} else {",
                  "    console.log('‚úÖ No hay pr√©stamos vencidos');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/prestamos/pendientes",
              "host": ["{{baseUrl}}"],
              "path": ["prestamos", "pendientes"]
            }
          }
        },
        {
          "name": "Pr√©stamos por Lector",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pr√©stamos del lector obtenidos', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üë§ Pr√©stamos del lector:', response.total);",
                  "console.log('üìã En esta p√°gina:', response.data.length);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/prestamos/lector/{{lectorId}}?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["prestamos", "lector", "{{lectorId}}"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Registrar Devoluci√≥n",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Calcular fecha de devoluci√≥n (hoy)",
                  "const today = new Date();",
                  "const formatDate = (date) => {",
                  "    return date.toISOString().split('T')[0];",
                  "};",
                  "",
                  "pm.collectionVariables.set('fechaDevolucionReal', formatDate(today));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Devoluci√≥n registrada exitosamente', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Estado actualizado a Devuelto', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.estado).to.equal('Devuelto');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('‚úÖ Devoluci√≥n registrada exitosamente');",
                  "console.log('üìÖ Fecha devoluci√≥n real:', response.fecha_devolucion_real);",
                  "console.log('üè∑Ô∏è Estado actual:', response.estado);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fecha_devolucion_real\": \"{{fechaDevolucionReal}}\",\n  \"observaciones\": \"Devuelto en perfectas condiciones. Libro bien cuidado por la estudiante.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/prestamos/{{prestamoId}}/devolucion",
              "host": ["{{baseUrl}}"],
              "path": ["prestamos", "{{prestamoId}}", "devolucion"]
            }
          }
        }
      ],
      "description": "Gesti√≥n completa de pr√©stamos"
    },
    {
      "name": "üë• USUARIOS ADICIONALES",
      "item": [
        {
          "name": "Crear Usuario Bibliotecario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Bibliotecario creado exitosamente', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('‚úÖ Bibliotecario creado con ID:', response.id);",
                  "console.log('üë§ Nombre completo:', response.nombre, response.apellido);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Mar√≠a Elena\",\n  \"apellido\": \"Garc√≠a L√≥pez\",\n  \"correo\": \"bibliotecario@unsa.edu.pe\",\n  \"tipo\": \"Bibliotecario\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          }
        },
        {
          "name": "Crear Usuario Consultor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Consultor creado exitosamente', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "console.log('‚úÖ Usuario consultor creado');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Carlos Eduardo\",\n  \"apellido\": \"Mart√≠nez Silva\",\n  \"correo\": \"consultor@unsa.edu.pe\",\n  \"tipo\": \"Consultor\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          }
        },
        {
          "name": "Listar Todos los Usuarios",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Usuarios listados correctamente', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üë• Total de usuarios en el sistema:', response.total);",
                  "",
                  "// Contar usuarios por tipo",
                  "const userTypes = {};",
                  "response.data.forEach(user => {",
                  "    userTypes[user.tipo] = (userTypes[user.tipo] || 0) + 1;",
                  "});",
                  "",
                  "console.log('üìä Distribuci√≥n por tipo:');",
                  "Object.keys(userTypes).forEach(tipo => {",
                  "    console.log(`   ‚Ä¢ ${tipo}: ${userTypes[tipo]}`);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/usuarios?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        }
      ],
      "description": "Crear usuarios adicionales del sistema"
    },
    {
      "name": "üìä REPORTES Y CONSULTAS",
      "item": [
        {
          "name": "Resumen General del Sistema",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Usuarios consultados correctamente', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const usuarios = pm.response.json();",
                  "",
                  "// Consultar otras entidades para generar reporte",
                  "pm.sendRequest({",
                  "    url: pm.collectionVariables.get('baseUrl') + '/categorias',",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.collectionVariables.get('token')",
                  "    }",
                  "}, function (err, categorias) {",
                  "    pm.sendRequest({",
                  "        url: pm.collectionVariables.get('baseUrl') + '/lectores',",
                  "        method: 'GET',",
                  "        header: {",
                  "            'Authorization': 'Bearer ' + pm.collectionVariables.get('token')",
                  "        }",
                  "    }, function (err, lectores) {",
                  "        pm.sendRequest({",
                  "            url: pm.collectionVariables.get('baseUrl') + '/documentos',",
                  "            method: 'GET',",
                  "            header: {",
                  "                'Authorization': 'Bearer ' + pm.collectionVariables.get('token')",
                  "            }",
                  "        }, function (err, documentos) {",
                  "            pm.sendRequest({",
                  "                url: pm.collectionVariables.get('baseUrl') + '/prestamos',",
                  "                method: 'GET',",
                  "                header: {",
                  "                    'Authorization': 'Bearer ' + pm.collectionVariables.get('token')",
                  "                }",
                  "            }, function (err, prestamos) {",
                  "                // Generar reporte completo",
                  "                console.log('');",
                  "                console.log('üìä REPORTE GENERAL DEL SISTEMA CEDIS');",
                  "                console.log('=' .repeat(50));",
                  "                console.log('üë• Usuarios del sistema:', usuarios.total);",
                  "                console.log('üìö Categor√≠as:', categorias.json().total);",
                  "                console.log('üìñ Lectores registrados:', lectores.json().total);",
                  "                console.log('üìÑ Documentos en cat√°logo:', documentos.json().total);",
                  "                console.log('üìã Pr√©stamos realizados:', prestamos.json().total);",
                  "                console.log('=' .repeat(50));",
                  "                console.log('‚úÖ Sistema CEDIS funcionando correctamente');",
                  "                console.log('üéâ Todas las funcionalidades probadas exitosamente');",
                  "            });",
                  "        });",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          }
        }
      ],
      "description": "Reportes y estad√≠sticas del sistema"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global ejecutado antes de cada request",
          "const requestName = pm.info.requestName;",
          "const folderName = pm.info.requestName.includes('CONFIGURACI√ìN') ? 'üöÄ' : ",
          "                   pm.info.requestName.includes('CATEGOR√çAS') ? 'üìö' : ",
          "                   pm.info.requestName.includes('LECTORES') ? 'üìñ' : ",
          "                   pm.info.requestName.includes('DOCUMENTOS') ? 'üìÑ' : ",
          "                   pm.info.requestName.includes('PR√âSTAMOS') ? 'üìã' : '‚ö°';",
          "",
          "console.log(`\\n${folderName} Ejecutando: ${requestName}`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global ejecutado despu√©s de cada request",
          "const statusCode = pm.response.code;",
          "const statusIcon = statusCode >= 200 && statusCode < 300 ? '‚úÖ' : ",
          "                   statusCode >= 400 && statusCode < 500 ? '‚ö†Ô∏è' : '‚ùå';",
          "",
          "console.log(`${statusIcon} Status: ${statusCode} ${pm.response.status}`);",
          "",
          "// Log de errores detallado",
          "if (statusCode >= 400) {",
          "    try {",
          "        const errorResponse = pm.response.json();",
          "        console.log('‚ùå Error Details:', errorResponse.message || errorResponse);",
          "    } catch (e) {",
          "        console.log('‚ùå Error Response:', pm.response.text());",
          "    }",
          "}",
          "",
          "// Verificar autenticaci√≥n",
          "if (statusCode === 401) {",
          "    console.log('üîê Sugerencia: Ejecutar \"Obtener Token de Autenticaci√≥n\" primero');",
          "}"
  ]
      }
    }
  ]
}